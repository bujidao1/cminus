State Stack: [0]
Symbol Stack: ['#']
0 ['int', 'int']
shifting:
State Stack: [0, 6]
Symbol Stack: ['#', 'int']
1 ['function', 'function']
reducing: [funtype -> int ]['int']
State Stack: [0, 4]
Symbol Stack: ['#', 'funtype']
1 ['function', 'function']
shifting:
State Stack: [0, 4, 10]
Symbol Stack: ['#', 'funtype', 'function']
2 ['id', 'calc']
shifting:
State Stack: [0, 4, 10, 12]
Symbol Stack: ['#', 'funtype', 'function', 'calc']
3 ['(', '(']
shifting:
State Stack: [0, 4, 10, 12, 14]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(']
4 ['int', 'int']
shifting:
State Stack: [0, 4, 10, 12, 14, 20]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'int']
5 ['id', 'a']
reducing: [type -> int ]['int']
State Stack: [0, 4, 10, 12, 14, 18]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'type']
5 ['id', 'a']
shifting:
State Stack: [0, 4, 10, 12, 14, 18, 26]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'type', 'a']
6 [',', ',']
reducing: [fundecl -> type id ]['a', 'type']
State Stack: [0, 4, 10, 12, 14, 17]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecl']
6 [',', ',']
reducing: [fundecls -> fundecl ]['fundecl']
State Stack: [0, 4, 10, 12, 14, 16]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls']
6 [',', ',']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 25]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ',']
7 ['int', 'int']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 25, 20]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ',', 'int']
8 ['id', 'b']
reducing: [type -> int ]['int']
State Stack: [0, 4, 10, 12, 14, 16, 25, 18]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ',', 'type']
8 ['id', 'b']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 25, 18, 26]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ',', 'type', 'b']
9 [')', ')']
reducing: [fundecl -> type id ]['b', 'type']
State Stack: [0, 4, 10, 12, 14, 16, 25, 47]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ',', 'fundecl']
9 [')', ')']
reducing: [fundecls -> fundecls , fundecl ]['fundecl', ',', 'fundecls']
State Stack: [0, 4, 10, 12, 14, 16]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls']
9 [')', ')']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')']
10 ['{', '}']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}']
11 ['int', 'int']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 20]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'int']
12 ['id', 'k']
reducing: [type -> int ]['int']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 23]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'type']
12 ['id', 'k']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 23, 45]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'type', 'k']
13 [';', ';']
reducing: [ids -> id ]['k']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 23, 44]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'type', 'ids']
13 [';', ';']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 23, 44, 68]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'type', 'ids', ';']
14 ['id', 'k']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 22]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decl']
14 ['id', 'k']
reducing: [decls -> decl ]['decl']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls']
14 ['id', 'k']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 42]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'k']
15 ['=', '=']
reducing: [left -> id ]['k']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left']
15 ['=', '=']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=']
16 ['id', 'a']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 91]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'a']
17 ['+', '+']
reducing: [F -> id ]['a']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 53]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'F']
17 ['+', '+']
reducing: [T -> F ]['F']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 52]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'T']
17 ['+', '+']
reducing: [E -> T ]['T']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 51]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'E']
17 ['+', '+']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 51, 73]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'E', '+']
18 ['id', 'b']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 51, 73, 58]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'E', '+', 'b']
19 [';', ';']
reducing: [F -> id ]['b']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 51, 73, 53]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'E', '+', 'F']
19 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 51, 73, 118]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'E', '+', 'T']
19 [';', ';']
reducing: [E -> E + T ]['T', '+', 'E']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 51]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'E']
19 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 38, 63, 90]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'left', '=', 'expr']
19 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 30]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'asgn']
19 [';', ';']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 30, 59]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'asgn', ';']
20 ['return', 'return']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 28]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmt']
20 ['return', 'return']
reducing: [stmts -> stmt ]['stmt']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts']
20 ['return', 'return']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return']
21 ['id', 'k']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29, 58]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return', 'k']
22 [';', ';']
reducing: [F -> id ]['k']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29, 53]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return', 'F']
22 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29, 52]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return', 'T']
22 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29, 51]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return', 'E']
22 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29, 50]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return', 'expr']
22 [';', ';']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 29, 50, 72]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'return', 'expr', ';']
23 ['}', '}']
reducing: [stmt -> return expr ; ][';', 'expr', 'return']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 49]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', 'stmt']
23 ['}', '}']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts']
23 ['}', '}']
shifting:
State Stack: [0, 4, 10, 12, 14, 16, 24, 46, 71, 117, 167]
Symbol Stack: ['#', 'funtype', 'function', 'calc', '(', 'fundecls', ')', '}', 'decls', 'stmts', '}']
24 ['void', 'void']
reducing: [fun -> funtype function id ( fundecls ) { decls stmts } ]['}', 'stmts', 'decls', '}', ')', 'fundecls', '(', 'calc', 'function', 'funtype']
State Stack: [0, 3]
Symbol Stack: ['#', 'fun']
24 ['void', 'void']
shifting:
State Stack: [0, 3, 2]
Symbol Stack: ['#', 'fun', 'void']
25 ['main', 'main']
shifting:
State Stack: [0, 3, 2, 7]
Symbol Stack: ['#', 'fun', 'void', 'main']
26 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11]
Symbol Stack: ['#', 'fun', 'void', 'main', '(']
27 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')']
28 ['{', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}']
29 ['int', 'int']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 20]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'int']
30 ['id', 'score']
reducing: [type -> int ]['int']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type']
30 ['id', 'score']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score']
31 ['[', '[']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[']
32 ['num', 6]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6]
33 [']', ']']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']']
34 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=']
35 ['{', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}']
36 ['num', 76]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 272]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 76]
37 [',', ',']
reducing: [nums -> num ][76]
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums']
37 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',']
38 ['num', 82]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',', 82]
39 [',', ',']
reducing: [nums -> nums , num ][82, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums']
39 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',']
40 ['num', 90]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',', 90]
41 [',', ',']
reducing: [nums -> nums , num ][90, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums']
41 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',']
42 ['num', 86]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',', 86]
43 [',', ',']
reducing: [nums -> nums , num ][86, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums']
43 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',']
44 ['num', 79]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',', 79]
45 [',', ',']
reducing: [nums -> nums , num ][79, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums']
45 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',']
46 ['num', 62]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', ',', 62]
47 ['}', '}']
reducing: [nums -> nums , num ][62, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums']
47 ['}', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 45, 70, 116, 166, 210, 244, 271, 299]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'score', '[', 6, ']', '=', '}', 'nums', '}']
48 [';', ';']
reducing: [ids -> id [ num ] = { nums } ]['}', 'nums', '}', '=', ']', 6, '[', 'score']
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'ids']
48 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 23, 44, 68]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'type', 'ids', ';']
49 ['int', 'int']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 3, 2, 7, 11, 13, 15, 22]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decl']
49 ['int', 'int']
reducing: [decls -> decl ]['decl']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls']
49 ['int', 'int']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 20]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'int']
50 ['id', 'credit']
reducing: [type -> int ]['int']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type']
50 ['id', 'credit']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit']
51 ['[', '[']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[']
52 ['num', 6]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6]
53 [']', ']']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']']
54 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=']
55 ['{', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}']
56 ['num', 2]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 272]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 2]
57 [',', ',']
reducing: [nums -> num ][2]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums']
57 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',']
58 ['num', 2]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',', 2]
59 [',', ',']
reducing: [nums -> nums , num ][2, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums']
59 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',']
60 ['num', 1]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',', 1]
61 [',', ',']
reducing: [nums -> nums , num ][1, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums']
61 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',']
62 ['num', 2]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',', 2]
63 [',', ',']
reducing: [nums -> nums , num ][2, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums']
63 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',']
64 ['num', 2]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',', 2]
65 [',', ',']
reducing: [nums -> nums , num ][2, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums']
65 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',']
66 ['num', 3]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 300, 321]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', ',', 3]
67 ['}', '}']
reducing: [nums -> nums , num ][3, ',', 'nums']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums']
67 ['}', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45, 70, 116, 166, 210, 244, 271, 299]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'credit', '[', 6, ']', '=', '}', 'nums', '}']
68 [';', ';']
reducing: [ids -> id [ num ] = { nums } ]['}', 'nums', '}', '=', ']', 6, '[', 'credit']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids']
68 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 68]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ';']
69 ['int', 'int']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 43]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'decl']
69 ['int', 'int']
reducing: [decls -> decls decl ]['decl', 'decls']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls']
69 ['int', 'int']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 20]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'int']
70 ['id', 'stu_number']
reducing: [type -> int ]['int']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type']
70 ['id', 'stu_number']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'stu_number']
71 [';', ';']
reducing: [ids -> id ]['stu_number']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids']
71 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 68]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ';']
72 ['int', 'int']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 43]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'decl']
72 ['int', 'int']
reducing: [decls -> decls decl ]['decl', 'decls']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls']
72 ['int', 'int']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 20]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'int']
73 ['id', 'mean']
reducing: [type -> int ]['int']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type']
73 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'mean']
74 [',', ',']
reducing: [ids -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids']
74 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 69]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ',']
75 ['id', 'sum']
reducing: [N6 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 69, 115]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ',', 'N6']
75 ['id', 'sum']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 69, 115, 165]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ',', 'N6', 'sum']
76 [';', ';']
reducing: [ids -> ids , N6 id ]['sum', 'N6', ',', 'ids']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids']
76 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 68]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ';']
77 ['int', 'int']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 43]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'decl']
77 ['int', 'int']
reducing: [decls -> decls decl ]['decl', 'decls']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls']
77 ['int', 'int']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 20]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'int']
78 ['id', 'temp']
reducing: [type -> int ]['int']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type']
78 ['id', 'temp']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'temp']
79 [';', ';']
reducing: [ids -> id ]['temp']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids']
79 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 68]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ';']
80 ['int', 'int']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 43]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'decl']
80 ['int', 'int']
reducing: [decls -> decls decl ]['decl', 'decls']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls']
80 ['int', 'int']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 20]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'int']
81 ['id', 'i']
reducing: [type -> int ]['int']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type']
81 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 45]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'i']
82 [';', ';']
reducing: [ids -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids']
82 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 23, 44, 68]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'type', 'ids', ';']
83 ['printf', 'printf']
reducing: [decl -> type ids ; ][';', 'ids', 'type']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 43]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'decl']
83 ['printf', 'printf']
reducing: [decls -> decls decl ]['decl', 'decls']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls']
83 ['printf', 'printf']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 36]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'printf']
84 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 36, 61]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'printf', '(']
85 ['str', '"please input your student number:"']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 36, 61, 88]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'printf', '(', '"please input your student number:"']
86 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 36, 61, 88, 132]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'printf', '(', '"please input your student number:"', ')']
87 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 36, 61, 88, 132, 176]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'printf', '(', '"please input your student number:"', ')', ';']
88 ['scanf', 'scanf']
reducing: [stmt -> printf ( str ) ; ][';', ')', '"please input your student number:"', '(', 'printf']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 28]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmt']
88 ['scanf', 'scanf']
reducing: [stmts -> stmt ]['stmt']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
88 ['scanf', 'scanf']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf']
89 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(']
90 ['str', '"%d"']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62, 89]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(', '"%d"']
91 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62, 89, 134]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(', '"%d"', ',']
92 ['&', 'addr']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62, 89, 134, 178]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(', '"%d"', ',', 'addr']
93 ['id', 'stu_number']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62, 89, 134, 178, 214]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(', '"%d"', ',', 'addr', 'stu_number']
94 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62, 89, 134, 178, 214, 248]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(', '"%d"', ',', 'addr', 'stu_number', ')']
95 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 37, 62, 89, 134, 178, 214, 248, 278]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'scanf', '(', '"%d"', ',', 'addr', 'stu_number', ')', ';']
96 ['id', 'sum']
reducing: [stmt -> scanf ( str , & id ) ; ][';', ')', 'stu_number', 'addr', ',', '"%d"', '(', 'scanf']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
96 ['id', 'sum']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
96 ['id', 'sum']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'sum']
97 ['=', '=']
reducing: [left -> id ]['sum']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left']
97 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=']
98 ['num', 0]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 55]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 0]
99 [';', ';']
reducing: [F -> num ][0]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'F']
99 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T']
99 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'E']
99 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'expr']
99 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn']
99 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn', ';']
100 ['id', 'temp']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
100 ['id', 'temp']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
100 ['id', 'temp']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'temp']
101 ['=', '=']
reducing: [left -> id ]['temp']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left']
101 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=']
102 ['num', 0]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 55]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 0]
103 [';', ';']
reducing: [F -> num ][0]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'F']
103 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T']
103 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'E']
103 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'expr']
103 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn']
103 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn', ';']
104 ['for', 'for']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
104 ['for', 'for']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
104 ['for', 'for']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for']
105 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(']
106 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'i']
107 ['=', '=']
reducing: [left -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left']
107 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left', '=']
108 ['num', 0]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38, 63, 55]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left', '=', 0]
109 [';', ';']
reducing: [F -> num ][0]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left', '=', 'F']
109 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left', '=', 'T']
109 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left', '=', 'E']
109 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'left', '=', 'expr']
109 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn']
109 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';']
110 ['id', 'i']
reducing: [M1 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1']
110 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 105]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'i']
111 ['<', '<']
reducing: [F -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 100]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'F']
111 ['<', '<']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 99]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'T']
111 ['<', '<']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 98]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'E']
111 ['<', '<']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr']
111 ['<', '<']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 143]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', '<']
112 ['num', 6]
reducing: [op -> < ]['<']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 252]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', 'op']
112 ['num', 6]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 252, 286]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', 'op', 6]
113 [';', ';']
reducing: [F -> num ][6]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 252, 284]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', 'op', 'F']
113 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 252, 283]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', 'op', 'T']
113 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 252, 282]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', 'op', 'E']
113 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 218, 252, 281]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'expr', 'op', 'expr']
113 [';', ';']
reducing: [rel -> expr op expr ]['expr', 'op', 'expr']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel']
113 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';']
114 ['id', 'i']
reducing: [N4 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4']
114 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 305]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'i']
115 ['++', '++']
reducing: [left -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 304]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'left']
115 ['++', '++']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 304, 324]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'left', '++']
116 [')', ')']
reducing: [inc -> left ++ ]['++', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc']
116 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')']
117 ['{', '}']
reducing: [N2 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2']
117 ['{', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}']
118 ['id', 'sum']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'sum']
119 ['=', '=']
reducing: [left -> id ]['sum']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left']
119 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=']
120 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 54]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', '(']
121 ['id', 'sum']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 54, 85]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', '(', 'sum']
122 [')', ')']
reducing: [F -> id ]['sum']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 54, 80]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', '(', 'F']
122 [')', ')']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 54, 79]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', '(', 'T']
122 [')', ')']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 54, 78]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', '(', 'E']
122 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 54, 78, 123]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', '(', 'E', ')']
123 ['+', '+']
reducing: [F -> ( E ) ][')', 'E', '(']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'F']
123 ['+', '+']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'T']
123 ['+', '+']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E']
123 ['+', '+']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+']
124 ['id', 'score']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score']
125 ['[', '[']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[']
126 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86, 114]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[', 'i']
127 [']', ']']
reducing: [F -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86, 109]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[', 'F']
127 [']', ']']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86, 108]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[', 'T']
127 [']', ']']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86, 107]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[', 'E']
127 [']', ']']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86, 131]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[', 'expr']
127 [']', ']']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 58, 86, 131, 175]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'score', '[', 'expr', ']']
128 ['*', '*']
reducing: [F -> id [ expr ] ][']', 'expr', '[', 'score']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'F']
128 ['*', '*']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T']
128 ['*', '*']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*']
129 ['id', 'credit']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit']
130 ['[', '[']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[']
131 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86, 114]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[', 'i']
132 [']', ']']
reducing: [F -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86, 109]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[', 'F']
132 [']', ']']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86, 108]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[', 'T']
132 [']', ']']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86, 107]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[', 'E']
132 [']', ']']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86, 131]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[', 'expr']
132 [']', ']']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 58, 86, 131, 175]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'credit', '[', 'expr', ']']
133 [';', ';']
reducing: [F -> id [ expr ] ][']', 'expr', '[', 'credit']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118, 75, 120]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T', '*', 'F']
133 [';', ';']
reducing: [T -> T * F ]['F', '*', 'T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51, 73, 118]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E', '+', 'T']
133 [';', ';']
reducing: [E -> E + T ]['T', '+', 'E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'E']
133 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'left', '=', 'expr']
133 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'asgn']
133 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'asgn', ';']
134 ['id', 'temp']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 28]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmt']
134 ['id', 'temp']
reducing: [stmts -> stmt ]['stmt']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts']
134 ['id', 'temp']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'temp']
135 ['=', '=']
reducing: [left -> id ]['temp']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left']
135 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=']
136 ['id', 'temp']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 91]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'temp']
137 ['+', '+']
reducing: [F -> id ]['temp']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'F']
137 ['+', '+']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'T']
137 ['+', '+']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E']
137 ['+', '+']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+']
138 ['id', 'credit']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit']
139 ['[', '[']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[']
140 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86, 114]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[', 'i']
141 [']', ']']
reducing: [F -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86, 109]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[', 'F']
141 [']', ']']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86, 108]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[', 'T']
141 [']', ']']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86, 107]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[', 'E']
141 [']', ']']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86, 131]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[', 'expr']
141 [']', ']']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 58, 86, 131, 175]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'credit', '[', 'expr', ']']
142 [';', ';']
reducing: [F -> id [ expr ] ][']', 'expr', '[', 'credit']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'F']
142 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51, 73, 118]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E', '+', 'T']
142 [';', ';']
reducing: [E -> E + T ]['T', '+', 'E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'E']
142 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'left', '=', 'expr']
142 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'asgn']
142 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'asgn', ';']
143 ['}', '}']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', 'stmt']
143 ['}', '}']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts']
143 ['}', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 33, 60, 87]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', '}', 'stmts', '}']
144 ['id', 'mean']
reducing: [stmt -> { stmts } ]['}', 'stmts', '}']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 39, 64, 93, 136, 183, 217, 250, 279, 303, 323, 341, 350]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'for', '(', 'asgn', ';', 'M1', 'rel', ';', 'N4', 'inc', ')', 'N2', 'stmt']
144 ['id', 'mean']
reducing: [iter -> for ( asgn ; M1 rel ; N4 inc ) N2 stmt ]['stmt', 'N2', ')', 'inc', 'N4', ';', 'rel', 'M1', ';', 'asgn', '(', 'for']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 31]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'iter']
144 ['id', 'mean']
reducing: [stmt -> iter ]['iter']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
144 ['id', 'mean']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
144 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'mean']
145 ['=', '=']
reducing: [left -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left']
145 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=']
146 ['id', 'sum']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 91]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'sum']
147 ['/', '/']
reducing: [F -> id ]['sum']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'F']
147 ['/', '/']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T']
147 ['/', '/']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52, 76]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T', '/']
148 ['id', 'temp']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52, 76, 58]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T', '/', 'temp']
149 [';', ';']
reducing: [F -> id ]['temp']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52, 76, 121]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T', '/', 'F']
149 [';', ';']
reducing: [T -> T / F ]['F', '/', 'T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'T']
149 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'E']
149 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'expr']
149 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn']
149 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn', ';']
150 ['if', 'if']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
150 ['if', 'if']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
150 ['if', 'if']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if']
151 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(']
152 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 105]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'mean']
153 ['>=', '>=']
reducing: [F -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 100]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'F']
153 ['>=', '>=']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 99]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'T']
153 ['>=', '>=']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 98]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'E']
153 ['>=', '>=']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr']
153 ['>=', '>=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 146]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', '>=']
154 ['num', 60]
reducing: [op -> >= ]['>=']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 142]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', 'op']
154 ['num', 60]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 142, 192]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', 'op', 60]
155 [')', ')']
reducing: [F -> num ][60]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 142, 190]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', 'op', 'F']
155 [')', ')']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 142, 189]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', 'op', 'T']
155 [')', ')']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 142, 188]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', 'op', 'E']
155 [')', ')']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 96, 142, 187]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'expr', 'op', 'expr']
155 [')', ')']
reducing: [rel -> expr op expr ]['expr', 'op', 'expr']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel']
155 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')']
156 ['{', '}']
reducing: [M1 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1']
156 ['{', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}']
157 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'mean']
158 ['=', '=']
reducing: [left -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left']
158 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=']
159 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 91]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'mean']
160 ['-', '-']
reducing: [F -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'F']
160 ['-', '-']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'T']
160 ['-', '-']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'E']
160 ['-', '-']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 51, 74]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'E', '-']
161 ['num', 60]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 51, 74, 55]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'E', '-', 60]
162 [';', ';']
reducing: [F -> num ][60]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 51, 74, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'E', '-', 'F']
162 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 51, 74, 119]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'E', '-', 'T']
162 [';', ';']
reducing: [E -> E - T ]['T', '-', 'E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'E']
162 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'left', '=', 'expr']
162 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'asgn']
162 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'asgn', ';']
163 ['printf', 'printf']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 28]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmt']
163 ['printf', 'printf']
reducing: [stmts -> stmt ]['stmt']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts']
163 ['printf', 'printf']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf']
164 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(']
165 ['str', '"the score of student number  %d is %d higher than 60.\\n"']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"']
166 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',']
167 ['id', 'stu_number']
reducing: [N5 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5']
167 ['id', 'stu_number']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 213]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'stu_number']
168 [',', ',']
reducing: [ids -> id ]['stu_number']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids']
168 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212, 246]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids', ',']
169 ['id', 'mean']
reducing: [N6 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212, 246, 276]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids', ',', 'N6']
169 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212, 246, 276, 301]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids', ',', 'N6', 'mean']
170 [')', ')']
reducing: [ids -> ids , N6 id ]['mean', 'N6', ',', 'ids']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids']
170 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212, 245]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids', ')']
171 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 36, 61, 88, 133, 177, 212, 245, 275]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'printf', '(', '"the score of student number  %d is %d higher than 60.\\n"', ',', 'N5', 'ids', ')', ';']
172 ['}', '}']
reducing: [stmt -> printf ( str , N5 ids ) ; ][';', ')', 'ids', 'N5', ',', '"the score of student number  %d is %d higher than 60.\\n"', '(', 'printf']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', 'stmt']
172 ['}', '}']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts']
172 ['}', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 226, 258, 292]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', '}', 'stmts', '}']
173 ['else', 'else']
reducing: [stmt -> { stmts } ]['}', 'stmts', '}']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt']
173 ['else', 'else']
reducing: [N1 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1']
173 ['else', 'else']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else']
174 ['{', '}']
reducing: [M2 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2']
174 ['{', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}']
175 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'mean']
176 ['=', '=']
reducing: [left -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left']
176 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=']
177 ['num', 60]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 55]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 60]
178 ['-', '-']
reducing: [F -> num ][60]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'F']
178 ['-', '-']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'T']
178 ['-', '-']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'E']
178 ['-', '-']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 51, 74]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'E', '-']
179 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 51, 74, 58]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'E', '-', 'mean']
180 [';', ';']
reducing: [F -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 51, 74, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'E', '-', 'F']
180 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 51, 74, 119]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'E', '-', 'T']
180 [';', ';']
reducing: [E -> E - T ]['T', '-', 'E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'E']
180 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 38, 63, 90]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'left', '=', 'expr']
180 [';', ';']
reducing: [asgn -> left = expr ]['expr', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'asgn']
180 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'asgn', ';']
181 ['printf', 'printf']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 28]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmt']
181 ['printf', 'printf']
reducing: [stmts -> stmt ]['stmt']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts']
181 ['printf', 'printf']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf']
182 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(']
183 ['str', '"the score of student number %d is %d lower than 60.\\n"']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"']
184 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',']
185 ['id', 'stu_number']
reducing: [N5 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5']
185 ['id', 'stu_number']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 213]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'stu_number']
186 [',', ',']
reducing: [ids -> id ]['stu_number']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids']
186 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212, 246]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids', ',']
187 ['id', 'mean']
reducing: [N6 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212, 246, 276]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids', ',', 'N6']
187 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212, 246, 276, 301]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids', ',', 'N6', 'mean']
188 [')', ')']
reducing: [ids -> ids , N6 id ]['mean', 'N6', ',', 'ids']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids']
188 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212, 245]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids', ')']
189 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 36, 61, 88, 133, 177, 212, 245, 275]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'printf', '(', '"the score of student number %d is %d lower than 60.\\n"', ',', 'N5', 'ids', ')', ';']
190 ['}', '}']
reducing: [stmt -> printf ( str , N5 ids ) ; ][';', ')', 'ids', 'N5', ',', '"the score of student number %d is %d lower than 60.\\n"', '(', 'printf']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', 'stmt']
190 ['}', '}']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts']
190 ['}', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 33, 60, 87]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', '}', 'stmts', '}']
191 ['id', 'i']
reducing: [stmt -> { stmts } ]['}', 'stmts', '}']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 41, 66, 95, 138, 185, 221, 255, 290, 314, 333]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'if', '(', 'rel', ')', 'M1', 'stmt', 'N1', 'else', 'M2', 'stmt']
191 ['id', 'i']
reducing: [slct -> if ( rel ) M1 stmt N1 else M2 stmt ]['stmt', 'M2', 'else', 'N1', 'stmt', 'M1', ')', 'rel', '(', 'if']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 32]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'slct']
191 ['id', 'i']
reducing: [stmt -> slct ]['slct']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
191 ['id', 'i']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
191 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 42]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'i']
192 ['=', '=']
reducing: [left -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left']
192 ['=', '=']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=']
193 ['id', 'calc']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 91]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'calc']
194 ['(', '(']
reducing: [funid -> id ]['calc']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid']
194 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(']
195 ['id', 'mean']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 181]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'mean']
196 [',', ',']
reducing: [func -> id ]['mean']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 180]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'func']
196 [',', ',']
reducing: [funcs -> func ]['func']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 179]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'funcs']
196 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 179, 216]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'funcs', ',']
197 ['id', 'temp']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 179, 216, 181]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'funcs', ',', 'temp']
198 [')', ')']
reducing: [func -> id ]['temp']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 179, 216, 249]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'funcs', ',', 'func']
198 [')', ')']
reducing: [funcs -> funcs , func ]['func', ',', 'funcs']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 179]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'funcs']
198 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 38, 63, 92, 135, 179, 215]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'left', '=', 'funid', '(', 'funcs', ')']
199 [';', ';']
reducing: [asgn -> left = funid ( funcs ) ][')', 'funcs', '(', 'funid', '=', 'left']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn']
199 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 30, 59]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'asgn', ';']
200 ['printf', 'printf']
reducing: [stmt -> asgn ; ][';', 'asgn']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
200 ['printf', 'printf']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
200 ['printf', 'printf']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf']
201 ['(', '(']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(']
202 ['str', '"sum: %d"']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"']
203 [',', ',']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88, 133]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"', ',']
204 ['id', 'i']
reducing: [N5 -> ][]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88, 133, 177]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"', ',', 'N5']
204 ['id', 'i']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88, 133, 177, 213]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"', ',', 'N5', 'i']
205 [')', ')']
reducing: [ids -> id ]['i']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88, 133, 177, 212]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"', ',', 'N5', 'ids']
205 [')', ')']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88, 133, 177, 212, 245]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"', ',', 'N5', 'ids', ')']
206 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 36, 61, 88, 133, 177, 212, 245, 275]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'printf', '(', '"sum: %d"', ',', 'N5', 'ids', ')', ';']
207 ['return', 'return']
reducing: [stmt -> printf ( str , N5 ids ) ; ][';', ')', 'ids', 'N5', ',', '"sum: %d"', '(', 'printf']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
207 ['return', 'return']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
207 ['return', 'return']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return']
208 ['num', 0]
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29, 55]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return', 0]
209 [';', ';']
reducing: [F -> num ][0]
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29, 53]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return', 'F']
209 [';', ';']
reducing: [T -> F ]['F']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29, 52]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return', 'T']
209 [';', ';']
reducing: [E -> T ]['T']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29, 51]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return', 'E']
209 [';', ';']
reducing: [expr -> E ]['E']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29, 50]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return', 'expr']
209 [';', ';']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 29, 50, 72]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'return', 'expr', ';']
210 ['}', '}']
reducing: [stmt -> return expr ; ][';', 'expr', 'return']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 49]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', 'stmt']
210 ['}', '}']
reducing: [stmts -> stmts stmt ]['stmt', 'stmts']
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts']
210 ['}', '}']
shifting:
State Stack: [0, 3, 2, 7, 11, 13, 15, 21, 27, 48]
Symbol Stack: ['#', 'fun', 'void', 'main', '(', ')', '}', 'decls', 'stmts', '}']
211 ['#', -1]
reducing: [S -> void main ( ) { decls stmts } ]['}', 'stmts', 'decls', '}', ')', '(', 'main', 'void']
State Stack: [0, 3, 8]
Symbol Stack: ['#', 'fun', 'S']
211 ['#', -1]
reducing: [S -> fun S ]['S', 'fun']
State Stack: [0, 1]
Symbol Stack: ['#', 'S']
211 ['#', -1]
